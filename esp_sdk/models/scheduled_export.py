# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class ScheduledExport(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, type=None, status=None, send_with_attachment=None, filter=None, authenticated=None, hour=None, day=None, time_zone=None, created_at=None, updated_at=None, recipient=None, external_account=None, external_account_id=None, creator=None, creator_id=None, user=None, user_id=None):
        """
        ScheduledExport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'type': 'str',
            'status': 'str',
            'send_with_attachment': 'bool',
            'filter': 'object',
            'authenticated': 'bool',
            'hour': 'int',
            'day': 'str',
            'time_zone': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'recipient': 'str',
            'external_account': 'ExternalAccount',
            'external_account_id': 'int',
            'creator': 'User',
            'creator_id': 'int',
            'user': 'User',
            'user_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'status': 'status',
            'send_with_attachment': 'send_with_attachment',
            'filter': 'filter',
            'authenticated': 'authenticated',
            'hour': 'hour',
            'day': 'day',
            'time_zone': 'time_zone',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'recipient': 'recipient',
            'external_account': 'external_account',
            'external_account_id': 'external_account_id',
            'creator': 'creator',
            'creator_id': 'creator_id',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._id = id
        self._type = type
        self._status = status
        self._send_with_attachment = send_with_attachment
        self._filter = filter
        self._authenticated = authenticated
        self._hour = hour
        self._day = day
        self._time_zone = time_zone
        self._created_at = created_at
        self._updated_at = updated_at
        self._recipient = recipient
        self._external_account = external_account
        self._external_account_id = external_account_id
        self._creator = creator
        self._creator_id = creator_id
        self._user = user
        self._user_id = user_id

    @property
    def id(self):
        """
        Gets the id of this ScheduledExport.
        Unique ID

        :return: The id of this ScheduledExport.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ScheduledExport.
        Unique ID

        :param id: The id of this ScheduledExport.
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this ScheduledExport.
        Type of export to control frequency. Valid values are weekly, daily, monthly

        :return: The type of this ScheduledExport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ScheduledExport.
        Type of export to control frequency. Valid values are weekly, daily, monthly

        :param type: The type of this ScheduledExport.
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """
        Gets the status of this ScheduledExport.
        Status of the scheduled export. Valid values are active, unsubscribed, disabled

        :return: The status of this ScheduledExport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ScheduledExport.
        Status of the scheduled export. Valid values are active, unsubscribed, disabled

        :param status: The status of this ScheduledExport.
        :type: str
        """

        self._status = status

    @property
    def send_with_attachment(self):
        """
        Gets the send_with_attachment of this ScheduledExport.
        Whether or not to send the file as an attachment. Valid values are true, false

        :return: The send_with_attachment of this ScheduledExport.
        :rtype: bool
        """
        return self._send_with_attachment

    @send_with_attachment.setter
    def send_with_attachment(self, send_with_attachment):
        """
        Sets the send_with_attachment of this ScheduledExport.
        Whether or not to send the file as an attachment. Valid values are true, false

        :param send_with_attachment: The send_with_attachment of this ScheduledExport.
        :type: bool
        """

        self._send_with_attachment = send_with_attachment

    @property
    def filter(self):
        """
        Gets the filter of this ScheduledExport.
        Params used to filter the alerts that will be exported

        :return: The filter of this ScheduledExport.
        :rtype: object
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this ScheduledExport.
        Params used to filter the alerts that will be exported

        :param filter: The filter of this ScheduledExport.
        :type: object
        """

        self._filter = filter

    @property
    def authenticated(self):
        """
        Gets the authenticated of this ScheduledExport.
        Whether or not require authentication before viewing the file. Valid values are true, false

        :return: The authenticated of this ScheduledExport.
        :rtype: bool
        """
        return self._authenticated

    @authenticated.setter
    def authenticated(self, authenticated):
        """
        Sets the authenticated of this ScheduledExport.
        Whether or not require authentication before viewing the file. Valid values are true, false

        :param authenticated: The authenticated of this ScheduledExport.
        :type: bool
        """

        self._authenticated = authenticated

    @property
    def hour(self):
        """
        Gets the hour of this ScheduledExport.
        Hour of the day to perform the export. Valid values are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23

        :return: The hour of this ScheduledExport.
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """
        Sets the hour of this ScheduledExport.
        Hour of the day to perform the export. Valid values are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23

        :param hour: The hour of this ScheduledExport.
        :type: int
        """

        self._hour = hour

    @property
    def day(self):
        """
        Gets the day of this ScheduledExport.
        Day of the week or day of the month to perform the export.  Allowed Values: Daily: nil - Weekly: sunday, monday, tuesday, wednesday, thursday, friday, or saturday - Monthly: 0 to 31. Valid values are sunday, monday, tuesday, wednesday, thursday, friday, saturday, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31

        :return: The day of this ScheduledExport.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """
        Sets the day of this ScheduledExport.
        Day of the week or day of the month to perform the export.  Allowed Values: Daily: nil - Weekly: sunday, monday, tuesday, wednesday, thursday, friday, or saturday - Monthly: 0 to 31. Valid values are sunday, monday, tuesday, wednesday, thursday, friday, saturday, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31

        :param day: The day of this ScheduledExport.
        :type: str
        """

        self._day = day

    @property
    def time_zone(self):
        """
        Gets the time_zone of this ScheduledExport.
        Time zone to use when calculating hour and day

        :return: The time_zone of this ScheduledExport.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """
        Sets the time_zone of this ScheduledExport.
        Time zone to use when calculating hour and day

        :param time_zone: The time_zone of this ScheduledExport.
        :type: str
        """

        self._time_zone = time_zone

    @property
    def created_at(self):
        """
        Gets the created_at of this ScheduledExport.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this ScheduledExport.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ScheduledExport.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this ScheduledExport.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ScheduledExport.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this ScheduledExport.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ScheduledExport.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this ScheduledExport.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def recipient(self):
        """
        Gets the recipient of this ScheduledExport.
        Email address the export will be sent to if unauthenticated

        :return: The recipient of this ScheduledExport.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """
        Sets the recipient of this ScheduledExport.
        Email address the export will be sent to if unauthenticated

        :param recipient: The recipient of this ScheduledExport.
        :type: str
        """

        self._recipient = recipient

    @property
    def external_account(self):
        """
        Gets the external_account of this ScheduledExport.
        Associated External Account

        :return: The external_account of this ScheduledExport.
        :rtype: ExternalAccount
        """
        return self._external_account

    @external_account.setter
    def external_account(self, external_account):
        """
        Sets the external_account of this ScheduledExport.
        Associated External Account

        :param external_account: The external_account of this ScheduledExport.
        :type: ExternalAccount
        """

        self._external_account = external_account

    @property
    def external_account_id(self):
        """
        Gets the external_account_id of this ScheduledExport.
        Associated External Account ID

        :return: The external_account_id of this ScheduledExport.
        :rtype: int
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """
        Sets the external_account_id of this ScheduledExport.
        Associated External Account ID

        :param external_account_id: The external_account_id of this ScheduledExport.
        :type: int
        """

        self._external_account_id = external_account_id

    @property
    def creator(self):
        """
        Gets the creator of this ScheduledExport.
        Associated Creator

        :return: The creator of this ScheduledExport.
        :rtype: User
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this ScheduledExport.
        Associated Creator

        :param creator: The creator of this ScheduledExport.
        :type: User
        """

        self._creator = creator

    @property
    def creator_id(self):
        """
        Gets the creator_id of this ScheduledExport.
        Associated Creator ID

        :return: The creator_id of this ScheduledExport.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this ScheduledExport.
        Associated Creator ID

        :param creator_id: The creator_id of this ScheduledExport.
        :type: int
        """

        self._creator_id = creator_id

    @property
    def user(self):
        """
        Gets the user of this ScheduledExport.
        Associated User

        :return: The user of this ScheduledExport.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this ScheduledExport.
        Associated User

        :param user: The user of this ScheduledExport.
        :type: User
        """

        self._user = user

    @property
    def user_id(self):
        """
        Gets the user_id of this ScheduledExport.
        Associated User ID

        :return: The user_id of this ScheduledExport.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ScheduledExport.
        Associated User ID

        :param user_id: The user_id of this ScheduledExport.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ScheduledExport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
